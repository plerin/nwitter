{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setnewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","toggleEditing","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","update","autoFocus","src","class","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","data","marginTop","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","getMyNweets","where","get","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e01060be.chunk.js","sourcesContent":["// Your web app's Firebase configuration\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  // apiKey:\"AIzaSyCO-9n4Bj7RQQPu3jhGzYDdSoT-ebCDMsg\",\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGEIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setnewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target: { name, value },\r\n        } = event;\r\n    \r\n        if (name === \"email\") {\r\n            setEmail(value);\r\n        } else if (name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    };\r\n    const onSubmit = async (event) => {\r\n        // 기본행위방지코드, 이렇게 이벤트 실행을 중지시키지 않으면 페이지는 새로고침되고 react 코드(state ..)가 사라져 이를 방지하기 위한 코드\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n            if (newAccount) {\r\n            //create account\r\n            data = await authService.createUserWithEmailAndPassword(\r\n                email,\r\n                password\r\n            );\r\n        } else {\r\n            // log in\r\n            data = await authService.signInWithEmailAndPassword(email, password);\r\n        }\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    const toggleAccount = () => setnewAccount((prev) => !prev);\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit} className=\"container\">\r\n            <input\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={email}\r\n            required\r\n            onChange={onChange}\r\n            className=\"authInput\"\r\n            />\r\n            <input\r\n            name=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            required\r\n            onChange={onChange}\r\n            className=\"authInput\"\r\n            />\r\n            <input type=\"submit\" className=\"authInput authSubmit\" value={newAccount ? \"Create Acoount\" : \"Log In\"} />\r\n            {error && <span className=\"authError\">{error}</span>}\r\n        </form>\r\n        <span onClick={toggleAccount} className=\"authSwitch\">\r\n            {newAccount ? \"Sign in\" : \"Create Account\"}\r\n        </span>   \r\n        </>\r\n    )\r\n};\r\n\r\nexport default AuthForm;","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport AuthForm from \"components/AuthForm\";\r\n\r\n// export default () => <span>Auth</span>\r\n\r\n// 다른 파일에서 자동 import 할 수 있는 방법\r\nconst Auth = () => {\r\n  \r\n  const onSocialClick = async (event) => {\r\n    const {target: {name}} = event;\r\n    let provider;\r\n    if(name === \"google\"){\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if(name === \"github\"){\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    // data = google/github 로그인 정보 \r\n    await authService.signInWithPopup(provider);\r\n    \r\n  }\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","import { faPencilAlt, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Nweet = ({nweetObj, isOwner}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n\r\n    //editing은 true/false를 갖고있으니 setEditing으로 이전 값의 반대로 toggle \r\n    const toggleEditing = (event) => setEditing((prev) => !prev);\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you really want to delete nweet?\");\r\n        if(ok){\r\n            // doc 안에 경로가 들어가야해 ,, collection/document(id)\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n        }\r\n    }\r\n    \r\n    const onChange = (event) => {\r\n        const {target:{value}} = event;\r\n        setNewNweet(value);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        \r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet\r\n        });\r\n        setEditing(false);\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"nweet\">\r\n            {editing ? <>\r\n                {isOwner && (\r\n                    <>\r\n                        <form onSubmit={onSubmit} className=\"container nweetEdit\">  \r\n                            <input type=\"text\" onChange={onChange} className=\"formInput\" placeholder=\"Edit your nweet\" value={newNweet} autoFocus required />\r\n                            <input type=\"submit\" className=\"formBtn\" value=\"Update nweet\" />\r\n                        </form>\r\n                        <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                            Cancel\r\n                        </span>\r\n                    </>\r\n                )}\r\n            </> : <>\r\n                <h4>{nweetObj.text}</h4>\r\n                {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\r\n            {isOwner && (\r\n                <div class=\"nweet__actions\">\r\n                    <span onClick={onDeleteClick}>\r\n                        <FontAwesomeIcon icon={faTrash} />\r\n                    </span>\r\n                    <span onClick={toggleEditing}>\r\n                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                    </span>\r\n                </div>\r\n            )}\r\n            </>}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nweet;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n/*\r\nnweet 생성 component\r\n*/\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n    const [nweet, setNweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (nweet === \"\") {\r\n            return;\r\n        }\r\n        let attachmentUrl = \"\";\r\n        if (attachment !== \"\") {\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl\r\n        }\r\n\r\n        await dbService.collection(\"nweets\").add(nweetObj);\r\n        setNweet(\"\");\r\n        setAttachment(\"\");\r\n    }\r\n    const onChange = (event) => {\r\n        const { target: { value } } = event;\r\n        setNweet(value);\r\n    }\r\n\r\n    const onFileChange = (event) => {\r\n        const { target: { files } } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        // reader load가 끝나면,, asDataURL 수행 뒤 \r\n        reader.onloadend = (finishedEvent) => {\r\n            const { currentTarget: { result } } = finishedEvent\r\n            setAttachment(result)\r\n        }\r\n        reader.readAsDataURL(theFile)\r\n    }\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input\r\n                    className=\"factoryInput__input\"\r\n                    value={nweet}\r\n                    onChange={onChange}\r\n                    type=\"text\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    maxLength={120}\r\n                />\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n            </div>\r\n            <label for=\"attach-file\" className=\"factoryInput__label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n            <input\r\n                id=\"attach-file\"\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={onFileChange}\r\n                style={{\r\n                    opacity: 0,\r\n                }}\r\n            />\r\n            {attachment && (\r\n                <div className=\"factoryForm__attachment\">\r\n                    <img\r\n                        src={attachment}\r\n                        style={{\r\n                            backgroundImage: attachment,\r\n                        }}\r\n                    />\r\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n                        <span>Remove</span>\r\n                        <FontAwesomeIcon icon={faTimes} />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NweetFactory;","import Nweet from \"components/Nweet\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ({userObj}) => {\r\n    const [nweets, setNweets] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        // onSnapshot : 기본적으로 데이터베이스에 무슨일이 있을 때 알림을 받아!\r\n        dbService.collection(\"nweets\").onSnapshot(snapshot => {\r\n            // ...doc.data()는 배열의 모든 요소를 받아오는 것이야 \r\n            const nweetArray = snapshot.docs.map(doc => ({id: doc.id, ...doc.data()}));\r\n            setNweets(nweetArray);\r\n        });\r\n    }, []);\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <NweetFactory userObj={userObj} />\r\n            <div style={{ marginTop: 30 }}>\r\n                {nweets.map((nweet) => (\r\n                    <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorId === userObj.uid}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Home;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Navigation = ({userObj}) => <nav>\r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n        <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n        </Link>\r\n        </li>\r\n        <li>\r\n        <Link\r\n            to=\"/profile\"\r\n            style={{\r\n            marginLeft: 10,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            fontSize: 12,\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n            <span style={{ marginTop: 10 }}>\r\n            {userObj.displayName\r\n                ? `${userObj.displayName}의 Profile`\r\n                : \"Profile\"}\r\n            </span>\r\n        </Link>\r\n        </li>\r\n    </ul>\r\n\r\n</nav>\r\n\r\n\r\nexport default Navigation;","import { authService, dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({userObj, refreshUser}) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n    \r\n    const onChange = (event) => {\r\n        const { target : {value}} = event;\r\n        setNewDisplayName(value);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if(userObj.displayName !== newDisplayName){\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName\r\n            });\r\n            // navigation에 있는 displayname update  // app.js에서 갖고옴 \r\n            refreshUser();\r\n        }\r\n    }\r\n    const getMyNweets = async () => {\r\n        // db에서 필터링 사용하는 방법 where \r\n        // 그래서 아래를 통해 collection안에 있는 데이터를 쿼리(query)를 이용해 마음대로 갖다 사용할 수 있다.\r\n        const nweets = await dbService.collection(\"nweets\").where(\"creatorId\",\"==\",userObj.uid).get();\r\n        //console.log(nweets.docs.map((doc) => doc.data()));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMyNweets();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n        <form onSubmit={onSubmit} className=\"profileForm\">\r\n            <input type=\"text\" className=\"formInput\" onChange={onChange} placeholder=\"Display name\" value={newDisplayName} autoFocus/>\r\n            <input type=\"submit\" className=\"formBtn\" value=\"Update Profile\" style={{marginTop: 10}} />\r\n        </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>Log Out</span>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\"\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"components/navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj} />}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                    <div\r\n                        style={{\r\n                            maxWidth: 890,\r\n                            width: \"100%\",\r\n                            margin: \"0 auto\",\r\n                            marginTop: 80,\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj={userObj} />\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile userObj={userObj} refreshUser={refreshUser} />\r\n                        </Route>\r\n                    </div>\r\n                ) : (<Route exact path=\"/\">\r\n                    <Auth />\r\n                </Route>)}\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\r\nimport AppRouter from \"components/Router\";\r\nimport { authService } from \"fbase\";\r\n\r\nfunction App() {\r\n  const [init, setInit] = useState(false);\r\n  // userObj는 우리 사이트 어디에서나 다 필요해 그럼 최상위 코드(App)에 있어야 해 그래야 다 갖다 사용할 수 있어\r\n  const [userObj, setUserObj] = useState(null);\r\n  //useEffect == componentDidMount + DidUpdate 합쳐진 것 component 이벤트 발생시 실행 , 파라미터로 []는 dependency ,, 적혀있는 값이 변경되야 반응, []처럼 비어있으면 언제든 발생 \r\n  useEffect(() => {\r\n    // onAuthStateChanged = auth에 변화가 생길 때 ex) 로그인 / 로그아웃\r\n    authService.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        //setUserObj(user);\r\n        setUserObj({\r\n          displayName: user.displayName,\r\n          uid : user.uid,\r\n          updateProfile: (args) => user.updateProfile(args)\r\n        })\r\n      } else {\r\n        setUserObj(null);\r\n      }\r\n      setInit(true);\r\n    });\r\n  }, []);\r\n\r\n  const refreshUser = () => {\r\n    const user = authService.currentUser\r\n    // obj가 크면 뭘 렌더링 하는지 몰라 그래서 setUserObj 안의 내용을 줄여 ,, ex) setUserObj(user)로 하면 react가 어떤걸 rerender할지 몰라 \r\n    setUserObj({\r\n      displayName: user.displayName,\r\n      uid : user.uid,\r\n      updateProfile: (args) => user.updateProfile(args)\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      {init ? <AppRouter isLoggedIn={Boolean(userObj)} userObj={userObj} refreshUser={refreshUser} /> : \"Initializing\"}\r\n      {/* <footer>&copy; {new Date().getFullYear()} Nwitter</footer> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nimport \"./styles.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}